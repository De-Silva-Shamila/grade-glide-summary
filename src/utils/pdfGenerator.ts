
import jsPDF from 'jspdf';
import { GPAData, Course, GRADE_POINTS } from '@/types/gpa';
import { getAcademicClassification } from '@/utils/academicClassifications';

interface ExtendedGPAData extends GPAData {
  gradePoints: typeof GRADE_POINTS;
  studentName: string;
}

export const generateGPAPDF = (data: ExtendedGPAData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  let yPosition = 20;
  
  // Header
  doc.setFillColor(37, 99, 235); // Blue color
  doc.rect(0, 0, pageWidth, 30, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('ACADEMIC TRANSCRIPT', pageWidth / 2, 20, { align: 'center' });
  
  yPosition = 50;
  
  // Student Information
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('STUDENT INFORMATION', 20, yPosition);
  
  yPosition += 15;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Student Name: ${data.studentName}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Date Generated: ${new Date().toLocaleDateString()}`, 20, yPosition);
  
  yPosition += 20;
  
  // Overall Performance Summary
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('OVERALL PERFORMANCE SUMMARY', 20, yPosition);
  
  yPosition += 15;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const classification = getAcademicClassification(data.overallGPA);
  
  doc.text(`Overall GPA: ${data.overallGPA.toFixed(2)}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Academic Classification: ${classification.name}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Classification Description: ${classification.description}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Total Credits Completed: ${data.totalCredits}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Number of Semesters: ${data.semesters.length}`, 20, yPosition);
  
  yPosition += 20;
  
  // Academic Performance Standards
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('ACADEMIC PERFORMANCE STANDARDS', 20, yPosition);
  
  yPosition += 15;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text('First Class Honours: 3.70 - 4.00 GPA', 20, yPosition);
  yPosition += 6;
  doc.text('Second Class Upper: 3.30 - 3.69 GPA', 20, yPosition);
  yPosition += 6;
  doc.text('Second Class Lower: 3.00 - 3.29 GPA', 20, yPosition);
  yPosition += 6;
  doc.text('General Pass: 2.00 - 2.99 GPA', 20, yPosition);
  yPosition += 6;
  doc.text('Below Pass: Below 2.00 GPA', 20, yPosition);
  
  yPosition += 20;
  
  // Semester Details
  data.semesters.forEach((semester, semesterIndex) => {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(`${semester.name.toUpperCase()}`, 20, yPosition);
    
    yPosition += 10;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    const semesterClassification = getAcademicClassification(semester.gpa);
    doc.text(`Semester GPA: ${semester.gpa.toFixed(2)} (${semesterClassification.name})`, 20, yPosition);
    yPosition += 6;
    doc.text(`Credits: ${semester.totalCredits}`, 20, yPosition);
    
    yPosition += 15;
    
    // Course table headers
    doc.setFont('helvetica', 'bold');
    doc.text('Course Name', 20, yPosition);
    doc.text('Credits', 120, yPosition);
    doc.text('Grade', 150, yPosition);
    doc.text('Points', 170, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    
    // Course details
    semester.courses.forEach((course: Course) => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      
      const gradePoints = data.gradePoints[course.grade] || 0;
      
      doc.text(course.name, 20, yPosition);
      doc.text(course.credits.toString(), 120, yPosition);
      doc.text(course.grade, 150, yPosition);
      doc.text((course.credits * gradePoints).toFixed(1), 170, yPosition);
      
      yPosition += 6;
    });
    
    yPosition += 15;
  });
  
  // Footer
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }
  
  yPosition = doc.internal.pageSize.height - 30;
  doc.setFillColor(37, 99, 235);
  doc.rect(0, yPosition - 10, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by GPA Calculator', pageWidth / 2, yPosition, { align: 'center' });
  doc.text(`${new Date().toLocaleString()}`, pageWidth / 2, yPosition + 8, { align: 'center' });
  
  // Save the PDF
  const fileName = `Academic_Transcript_${data.studentName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};
