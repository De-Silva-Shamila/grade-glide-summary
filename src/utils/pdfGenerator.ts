
import jsPDF from 'jspdf';

export const generateGPAPDF = (gpaData: any) => {
  const doc = new jsPDF();
  
  // Set font
  doc.setFont('helvetica');
  
  // Title
  doc.setFontSize(24);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('GPA Summary Report', 105, 30, { align: 'center' });
  
  // Subtitle
  doc.setFontSize(12);
  doc.setTextColor(100, 116, 139); // Gray color
  doc.text('Academic Performance Overview', 105, 40, { align: 'center' });
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, 105, 50, { align: 'center' });
  
  // Overall stats section
  doc.setFontSize(16);
  doc.setTextColor(59, 130, 246);
  doc.text('Overall Performance', 20, 70);
  
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Overall GPA: ${gpaData.overallGPA.toFixed(2)}`, 20, 85);
  doc.text(`Total Credits: ${gpaData.totalCredits}`, 20, 95);
  doc.text(`Total Semesters: ${gpaData.semesters.length}`, 20, 105);
  
  // Semesters section
  let yPosition = 125;
  
  gpaData.semesters.forEach((semester: any, index: number) => {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 30;
    }
    
    // Semester header
    doc.setFontSize(14);
    doc.setTextColor(59, 130, 246);
    doc.text(semester.name, 20, yPosition);
    
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text(`GPA: ${semester.gpa.toFixed(2)} | Credits: ${semester.totalCredits}`, 20, yPosition + 10);
    
    yPosition += 25;
    
    // Courses table header
    doc.setFontSize(9);
    doc.setTextColor(75, 85, 99);
    doc.text('Course Name', 20, yPosition);
    doc.text('Credits', 120, yPosition);
    doc.text('Grade', 150, yPosition);
    doc.text('Points', 170, yPosition);
    
    yPosition += 5;
    
    // Draw line under header
    doc.setDrawColor(226, 232, 240);
    doc.line(20, yPosition, 190, yPosition);
    
    yPosition += 8;
    
    // Courses
    semester.courses.forEach((course: any) => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 30;
      }
      
      doc.setFontSize(9);
      doc.setTextColor(0, 0, 0);
      
      // Truncate course name if too long
      const courseName = course.name.length > 25 ? course.name.substring(0, 25) + '...' : course.name;
      doc.text(courseName, 20, yPosition);
      doc.text(course.credits.toString(), 120, yPosition);
      doc.text(course.grade, 150, yPosition);
      doc.text((course.credits * (gpaData.gradePoints[course.grade] || 0)).toFixed(1), 170, yPosition);
      
      yPosition += 12;
    });
    
    yPosition += 10;
  });
  
  // Footer
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 30;
  }
  
  doc.setFontSize(8);
  doc.setTextColor(100, 116, 139);
  doc.text('This report was generated by GPA Calculator', 105, yPosition + 20, { align: 'center' });
  doc.text('All calculations follow standard 4.0 GPA scale', 105, yPosition + 30, { align: 'center' });
  
  // Save the PDF
  doc.save(`GPA_Summary_${new Date().toISOString().split('T')[0]}.pdf`);
};
